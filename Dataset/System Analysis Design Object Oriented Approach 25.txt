Th ese classes form collaborations. Collaborations allow the analyst to think in terms of clients, 
servers, and contracts.10 A client object is an instance of a class that sends a request to an 
instance of another class for an operation to be executed. A server object is the instance that 
receives the request from the client object. A contract formalizes the interactions between the 
client and server objects. Chapter 8 provides a more-detailed explanation of contracts and 
examples of their use.
An analyst can use the idea of class responsibilities and client–server–contract collaborations to help identify the classes, along with the attributes, operations, and relationships, 
involved with a use case. One of the easiest ways to use CRC cards in developing a structural 
model is through anthropomorphism—pretending that the classes have human characteristics. Members of the development team can either ask questions of themselves or be asked 
questions by other members of the team. Typically the questions asked are of the form:
Who or what are you?
What do you know?
What can you do?
Th e answers to the questions are then used to add detail to the evolving CRC cards. For 
example, in the appointment problem, a member of the team can pretend that he or she is an 
appointment. In this case, the appointment would answer that he or she knows about the doctor and patient who participate in the appointment and they would know the date and time 
of the appointment. Furthermore, an appointment would have to know how to create itself, 
delete itself, and to possibly change diff erent aspects of itself. In some cases, this approach will 
uncover additional objects that have to be added to the evolving structural model.
Elements of a CRC Card
Th e set of CRC cards contains all the information necessary to build a logical structural model 
of the problem under investigation. Figure 5-6 shows a sample CRC card. Each CRC card captures and describes the essential elements of a class. Th e front of the card contains the class’s 
name, ID, type, description, associated use cases, responsibilities, and collaborators. Th e name 
of a class should be a noun (but not a proper noun, such as the name of a specifi c person or 
thing). Just like the use cases, in later stages of development, it is important to be able to trace 
back design decisions to specifi c requirements. In conjunction with the list of associated use 
cases, the ID number for each class can be used to accomplish this. Th e description is simply 
a brief statement that can be used as a textual defi nition for the class. Th e responsibilities of 
the class tend to be the operations that the class must contain (i.e., the doing responsibilities).
Th e back of a CRC card contains the attributes and relationships of the class. Th e attributes 
of the class represent the knowing responsibilities that each instance of the class has to meet. 
Typically, the data type of each attribute is listed with the name of the attribute (e.g., the amount 
attribute is double and the insurance carrier is text). Th ree types of relationships typically are 
captured at this point: generalization, aggregation, and other associations. In Figure 5-6, we see 
that a Patient is a-kind-of Person and that a Patient is associated with Appointments.
CRC cards are used to document the essential properties of a class. However, once the 
cards are fi lled out, the analyst can use the cards and anthropomorphisms in role-playing 
(described in the next section) to uncover missing properties by executing the diff erent 
10 For more information, see K. Beck and W. Cunningham, “A Laboratory for Teaching Object-Oriented Th inking,” Proceedings of OOPSLA, SIGPLAN Notices, 24, no. 10 (1989): 1–6; B. Henderson-Sellers and B. Unhelkar, 
OPEN Modeling with UML (Harlow, England: Addison-Wesley, 2000); C. Larman, Applying UML and Patterns: An 
Introduction to Object-Oriented Analysis and Design (Englewood Cliff s, NJ: Prentice Hall, 1998); B. Meyer, ObjectOriented Soft ware Construction (Englewood Cliff s, NJ: Prentice Hall, 1994); R. Wirfs-Brock, B. Wilkerson, and 
L. Wiener, Designing Object-Oriented Soft ware (Englewood Cliff s, NJ, Prentice Hall, 1990).
174 Chapter 5 Structural Modeling
FIGURE 5-6
Sample CRC Card
Front:
Class Name: Old Patient ID: 3
Calculate last visit
Make appointment
Change status
Provide medical history
Responsibilities
Description: An individual who needs to receive or has received Associated Use Cases: 2
medical attention
Type: Concrete, Domain
Appointment
Medical history
Collaborators
Back:
Attributes: 
Insurance carrier (text)
Amount (double)
Relationships: 
Generalization (a-kind-of): Person
Aggregation (has-parts): Medical History
Other Associations: Appointment
scenarios associated with the use cases (see Chapter 4). Role-playing also can be used as a 
basis to test the clarity and completeness of the evolving representation of the system.
Role-Playing CRC Cards with Use Cases11, 12
In addition to the object identifi cation approaches described earlier (textual analysis, brainstorming, common object lists, and patterns), CRC cards can be used in a role-playing exercise 
that has been shown to be useful in discovering additional objects, attributes, relationships, 
and operations. Furthermore, in addition to walkthroughs, described later in this chapter, 
role-playing is very useful in testing the fi delity of the evolving structural model. In general, 
members of the team perform roles associated with the actors and objects previously identifi ed 
11 Th is step is related to the verifi cation and validation of the analysis models (functional, structural, and behavioral). 
Because this deals with verifi cation and validation that take place between the models, in this case functional and 
structural, we will return to this topic in Chapter 7.
12 Our role-playing approach is based on the work of D. Bellin and S. S. Simone, Th e CRC Card Book (Reading, MA: 
Addison-Wesley, 1997).
CRC Cards  175
with the diff erent use cases. Technically speaking, the members of the team perform the different steps associated with a specifi c scenario of a use case. Remember, a scenario is a single, 
unique execution path through a use case. A useful place to look for the diff erent scenarios of a 
use case is the activity diagrams (e.g., see Figures 4-8, 4-9, 4-10, and 4-12). A diff erent scenario 
exists for each time a decision node causes a split in the execution path of the use case. Also, 
scenarios can be identifi ed from the alternative/exceptional fl ows in a use-case description. 
Considering the incremental and iterative nature and that activity diagrams and use-case 
descriptions should contain the same information, reviewing both representations will ensure 
that relevant scenarios are not missed.
Th e fi rst step is to review the use-case descriptions (see Figure 5-2). Th is allows the team to 
pick a specifi c use case to role-play. Even though it is tempting to try to complete as many use 
cases as possible in a short time, the team should not choose the easiest use cases fi rst. Instead, 
at this point in the development of the system, the team should choose the use case that is the 
most important, the most complex, or the least understood.
Th e second step is to identify the relevant roles that are to be played. Each role is associated 
with either an actor or an object. To choose the relevant objects, the team reviews each of the 
CRC cards and picks the ones that are associated with the chosen use case. For example, in 
Figure 5-6, we see that the CRC card that represents the Old Patient class is associated with 
Use Case number 2. So if we were going to role-play the Make Old Patient Appt use case (see 
Figure 5-2), we would need to include the Old Patient CRC card. By reviewing the use-case 
description, we can easily identify the Old Patient and Doctor actors (see Primary Actor and 
Stakeholders section of the use case description in Figure 5-2). By reading the event section of 
the use-case description, we identify the internal actor role of Receptionist. Aft er identifying 
all of the relevant roles, we assign each one to a diff erent member of the team.
Th e third step is to role-play scenarios of the use case by having the team members perform each one. To do this, each team member must pretend that he or she is an instance 
of the role assigned to him or her. For example, if a team member was assigned the role of 
the Receptionist, then he or she would have to be able to perform the diff erent steps in the 
scenario associated with the Receptionist. In the case of the change appointment scenario, 
this would include steps 2, 5, 6, S-3, S-1, and S-2. However, when this scenario is performed 
(role-played), it would be discovered that steps 1, 3, and 4 were incomplete. For example, 
in Step 1, what actually occurs? Does the Patient make a phone call? If so, who answers 
the phone? In other words, a lot of information contained in the use-case description is 
only identifi ed in an implicit, not explicit, manner. When the information is not identifi ed 
explicitly, there is a lot of room for interpretation, which requires the team members to make 
assumptions. It is much better to remove the need to make an assumption by making each 
step explicit. In this case, Step 1 of the Normal Flow of Events should be modifi ed. Once the 
step has been fi xed, the scenario is tried again. Th is process is repeated until the scenario can 
be executed to a successful conclusion. Once the scenario has successfully concluded, the 
next scenario is performed. Th is is repeated until all of the scenarios of the use case can be 
performed successfully. 13
Th e fourth step is to simply repeat steps 1 through 3 for the remaining use cases.
13 In some cases, some scenarios are only executed in very rare circumstances. So, from a practical perspective, each 
scenario could be prioritized individually and only “important” scenarios would have to be implemented for the fi rst 
release of the system. Only those scenarios would have to be tested at this point in the evolution of the system.
2. Identify Relevant 
Actors and Objects
3. Role-Play 
Scenarios
1. Review Use Cases
4. Repeat Steps 
1 through 3
176 Chapter 5 Structural Modeling
CLASS DIAGRAMS
A class diagram is a static model that shows the classes and the relationships among classes 
that remain constant in the system over time. Th e class diagram depicts classes, which include 
both behaviors and states, with the relationships between the classes. Th e following sections 
present the elements of the class diagram, diff erent approaches that can be used to simplify a 
class diagram, and an alternative structure diagram: the object diagram.
Elements of a Class Diagram
Figure 5-7 shows a class diagram that was created to refl ect the classes and relationships 
associated with the appointment system. Th is diagram is based on the classes uncovered through the object identifi cation techniques and the role-playing of the CRC cards 
described earlier.
Class Th e main building block of a class diagram is the class, which stores and manages 
information in the system (see Figure 5-8). During analysis, classes refer to the people, 
places, and things about which the system will capture information. Later, during design 
and implementation, classes can refer to implementation-specifi c artifacts such as windows, forms, and other objects used to build the system. Each class is drawn using a threepart rectangle, with the class’s name at the top, attributes in the middle, and operations 
at the bottom. We can see that the classes identifi ed earlier, such as Participant, Doctor, 
Patient, Receptionist, Medical History, Appointment, and Symptom, are included in Figure 
5-7. Th e attributes of a class and their values defi ne the state of each object created from the 
class, and the behavior is represented by the operations.
Attributes are properties of the class about which we want to capture information 
(see Figure 5-8). Notice that the Participant class in Figure 5-7 contains the attributes: 
lastname, fi rstname, address, phone, and birthdate. At times, you might want to store 
derived attributes, which are attributes that can be calculated or derived; these special 
attributes are denoted by placing a slash (/) before the attribute’s name. Notice how the 
person class contains a derived attribute called /age, which can be derived by subtracting 
the patient’s birth date from the current date. It is also possible to show the visibility
of the attribute on the diagram. Visibility relates to the level of information hiding to be 
enforced for the attribute. Th e visibility of an attribute can be public (+), protected (#), 
or private (−). A public attribute is one that is not hidden from any other object. As such, 
other objects can modify its value. A protected attribute is one that is hidden from all other 
classes except its immediate subclasses. A private attribute is one that is hidden from all 
other classes. Th e default visibility for an attribute is normally private.
Operations are actions or functions that a class can perform (see Figure 5-8). Th e functions that are available to all classes (e.g., create a new instance, return a value for a particular 
attribute, set a value for a particular attribute, delete an instance) are not explicitly shown 
within the class rectangle. Instead, only operations unique to the class are included, such 
as the cancel without notice operation in the Appointment class and the calculate last visit 
operation in the Patient class in Figure 5-7. Notice that both the operations are followed by 
parentheses, which contain the parameter(s) needed by the operation. If an operation has no 
parameters, the parentheses are still shown but are empty. As with attributes, the visibility 
of an operation can be designated public, protected, or private. Th e default visibility for an 
operation is normally public.
Th ere are four kinds of operations that a class can contain: constructor, query, update, 
and destructor. A constructor operation creates a new instance of a class. For example, the 
patient class may have a method called insert (), which creates a new patient instance as 
177
FIGURE 5-7  Sample Class Diagram
Account
Employee
0..*
0..* 0..*
0..*
0..*
0..*
0..*
0..*
1..*
1..*
1..*
1..*
1..1
1..1
1..* 1..1
1..1
0..1 1..1 1..1
1..1
1..1 1..1
1..1
Debit
Credit
Entry
Appointment
-time
-date
-reason
+cancel without notice()
Patient
-insurance carrier 
+make appointment()
+calculate last visit()
+change status()
+provides medical history()
Participant
-lastname
-firstname
-address
-phone
-birthdate
-/age
Item Transaction Line Item
has
has contains
AssignedTo
+ primary
insurance
carrier
Doctor Receptionist Nurse
Medical History 
-heart disease
-high blood pressure
-diabetes
-allergies
provides
suffers
schedules
locatedAt
Good Service
Prescription Brace Physical Checkup
Symptom Illness
Place
Treatment
medication
instructions
symptom severity
-amount -name -description
178 Chapter 5 Structural Modeling
FIGURE 5-8
Class Diagram Syntax
A class:
• Has a name typed in bold and centered in its top 
 compartment. 
• Has a list of attributes in its middle compartment. 
• Represents a kind of person, place, or thing about
 which the system will need to capture and store
 information. 
• Has a list of operations in its bottom compartment. 
attribute name
/derived attribute name
operation name ()
• Does not explicitly show operations that are
 available to all classes. 
An attribute:
• Represents properties that describe the state of an
 object. 
• Can be derived from other attributes, shown by
 placing a slash before the attribute’s name. 
An operation:
• Represents the actions or functions that a class
 can perform. 
• Can be classified as a constructor, query, or
 update operation. 
• Includes parentheses that may contain parameters
 or information needed to perform the operation. 
An association:
• Represents a relationship between multiple
 classes or a class and itself. 
A generalization:
• Is labeled using a verb phrase or a role name,
 whichever better represents the relationship. 
An aggregation:
• Represents a logical a-part-of relationship
 between multiple classes or a class and itself.
• Is a special form of an association.
A composition:
• Represents a physical a-part-of relationship
 between multiple classes or a class and itself
• Is a special form of an association.
• Can exist between one or more classes. 
• Represents a-kind-of relationship between
 multiple classes. 
• Contains multiplicity symbols, which represent
 the minimum and maximum times a class
 instance can be associated with the related class
 instance. 
Class1
-Attribute-1
+Operation-1()
AssociatedWith
0..* 1
0..* IsPartOf 1
1..* IsPartOf 1
patients are entered into the system. As we just mentioned, if an operation implements one 
of the basic functions (e.g., create a new instance), it is normally not explicitly shown on the 
class diagram, so typically we do not see constructor methods explicitly on the class diagram.
A query operation makes information about the state of an object available to other 
objects, but it does not alter the object in any way. For instance, the calculate last visit () 
operation that determines when a patient last visited the doctor’s offi ce will result in the 
object’s being accessed by the system, but it will not make any change to its information. If a 
query method merely asks for information from attributes in the class (e.g., a patient’s name, 
address, phone), then it is not shown on the diagram because we assume that all objects have 
operations that produce the values of their attributes.
Class Diagrams  179
An update operation changes the value of some or all the object’s attributes, which may 
result in a change in the object’s state. Consider changing the status of a patient from new 
to current with a method called change status() or associating a patient with a particular 
appointment with make appointment (appointment). If the result of the operation can 
change the state of the object, then the operation must be explicitly included on the class 
diagram. On the other hand, if the update operation is a simple assignment operation, it can 
be omitted from the diagram.
A destructor operation simply deletes or removes the object from the system. For example, if an employee object no longer represents an actual employee associated with the fi rm, 
the employee could need to be removed from the employee database, and a destructor operation would be used to implement this behavior. However, deleting an object is one of the basic 
functions and therefore would not be included on the class diagram.
Relationships A primary purpose of a class diagram is to show the relationships, or associations, that classes have with one another. Th ese are depicted on the diagram by drawing 
lines between classes (see Figure 5-8). When multiple classes share a relationship (or a 
class shares a relationship with itself), a line is drawn and labeled with either the name of 
the relationship or the roles that the classes play in the relationship. For example, in Figure 
5-7 the two classes patient and appointment are associated with one another whenever 
a patient schedules an appointment. Th us, a line labeled schedules connects patient and 
appointment, representing exactly how the two classes are related to each other. Also, notice 
that there is a small solid triangle beside the name of the relationship. Th e triangle allows 
a direction to be associated with the name of the relationship. In Figure 5-7, the schedules 
relationship includes a triangle, indicating that the relationship is to be read as “patient 
schedules appointment.” Inclusion of the triangle simply increases the readability of the 
diagram. In Figure 5-9, three additional examples of associations are portrayed: An Invoice 
is AssociatedWith a Purchase Order (and vice versa), a Pilot Flies an Aircraft , and a Spare 
Tire IsLocatedIn a Trunk.
Sometimes a class is related to itself, as in the case of a patient being the primary insurance carrier for other patients (e.g., spouse, children). In Figure 5-7, notice that a line was 
drawn between the patient class and itself and called primary insurance carrier to depict 
the role that the class plays in the relationship. Notice that a plus (+) sign is placed before 
the label to communicate that it is a role as opposed to the name of the relationship. When 
labeling an association, we use either a relationship name or a role name (not both), whichever communicates a more thorough understanding of the model.
FIGURE 5-9
Sample Association
Purchase Order
Aircraft
Spare Tire Trunk
Pilot
Invoice
0..* 1
0..* 0..*
Flies
0..1 0..1
IsLocatedIn
AssociatedWith
180 Chapter 5 Structural Modeling
Relationships also have multiplicity, which documents how an instance of an object can 
be associated with other instances. Numbers are placed on the association path to denote the 
minimum and maximum instances that can be related through the association in the format 
minimum number.. maximum number (see Figure 5-10). Th e numbers specify the relationship from the class at the far end of the relationship line to the end with the number. For example, in Figure 5-7, there is a 0..* on the appointment end of the patient schedules appointment 
relationship. Th is means that a patient can be associated with zero through many diff erent 
appointments. At the patient end of this same relationship, there is a 1..1, meaning that an 
appointment must be associated with one and only one patient. In Figure 5-9, we see that 
an instance of the Invoice class must be AssociatedWith one instance of the Purchase Order 
class and that an instance of the Purchase Order class may be AssociatedWith zero or more 
instances of the Invoice class, that an instance of the Pilot class Flies zero or more instances 
of the Aircraft class, and that an instance of the Aircraft class may be fl own by zero or more 
instances of the Pilot class. Finally, we see that an instance the Spare Tire class IsLocatedIn 
zero or one instance of the Trunk class, whereas an instance of the Trunk class can contain 
zero or one instance of the Spare Tire class.
Th ere are times when a relationship itself has associated properties, especially when its 
classes share a many-to-many relationship. In these cases, a class called an association class 
is formed, which has its own attributes and operations.14 It is shown as a rectangle attached 
1
0..*
1..*
0..1
2..4
1..3,5
Exactly one
A department has
one and only one
boss.
Zero or more
One or more
Zero or one
Specified range 
Multiple, disjoint
ranges 
An employee has
zero to many
children. 
A boss is responsible
for one or more
employees. 
An employee can
be married to zero
or one spouse. 
An employee can
take from two to
four vacations each
year. 
An employee is a
member of one to
three or five
committees. 
Department Boss 1
Employee Child 0..*
Boss Employee 1..*
Employee Spouse 0..1
Employee Vacation 2..4
Employee Committee 1..3,5
FIGURE 5-10
Multiplicity
14 For those familiar with data modeling, associative classes serve a purpose similar to the one the associative entity 
serves in ER diagramming.
Class Diagrams  181
by a dashed line to the association path, and the rectangle’s name matches the label of the 
association. Th ink about the case of capturing information about illnesses and symptoms. 
An illness (e.g., the fl u) can be associated with many symptoms (e.g., sore throat, fever), 
and a symptom (e.g., sore throat) can be associated with many illnesses (e.g., the fl u, strep 
throat, the common cold). Figure 5-7 shows how an association class can capture information about remedies that change depending on the various combinations. For example, a 
sore throat caused by strep throat requires antibiotics, whereas treatment for a sore throat 
from the fl u or a cold could be throat lozenges or hot tea. Another way to decide when to 
use an association class is when attributes that belong to the intersection of the two classes 
involved in the association must be captured. We can visually think about an association 
class as a Venn diagram. For example, in Figure 5-11, the Grade idea is really an intersection 
of the Student and Course classes, because a grade exists only at the intersection of these 
two ideas. Another example shown in Figure 5-11 is that a job may be viewed as the intersection between a Person and a Company. Most oft en, classes are related through a normal 
association; however, there are two special cases of an association that you will see appear 
quite oft en: generalization and aggregation.
Generalization and Aggregation Associations A generalization association shows that 
one class (subclass) inherits from another class (superclass), meaning that the properties 
and operations of the superclass are also valid for objects of the subclass. Th e generalization 
path is shown with a solid line from the subclass to the superclass and a hollow arrow pointing at the superclass (see Figure 5-8). For example, Figure 5-7 communicates that doctors, 
nurses, and receptionists are all kinds of employees and those employees and patients are 
kinds of participants. Remember that the generalization relationship occurs when you need 
to use words like “is a kind of” to describe the relationship. Some additional examples of 
generalization are given in Figure 5-12. For example, Cardinal is a-kind-of Bird, which is 
a-kind-of Animal; a General Practitioner is a-kind-of Physician, which is a-kind-of Person; 
and a Truck is a-kind-of Land Vehicle, which is a-kind-of Vehicle.
An aggregation association is used when classes actually comprise other classes. For 
example, think about a doctor’s offi ce that has decided to create health care teams that 
include doctors, nurses, and administrative personnel. As patients enter the offi ce, they are 
assigned to a health care team, which cares for their needs during their visits. We could 
FIGURE 5-11  Sample Association Classes
Student Course
0..* 0..*
Grade
Student Grade Course
Person Company 0..* 0..*
Job
Person Job Company
182 Chapter 5 Structural Modeling
include this new knowledge in Figure 5-7 by adding two new classes (Administrative 
Personnel and Health Team) and aggregation relationships from the Doctor, the Nurse, 
and the new Administrative Personnel classes to the new Health Team class. A diamond 
is placed nearest the class representing the aggregation (health care team), and lines are 
drawn from the diamond to connect the classes that serve as its parts (doctors, nurses, and 
administrative personnel). Typically, you can identify these kinds of associations when you 
need to use words like “is a part of” or “is made up of” to describe the relationship. However, 
from a UML perspective, there are two types of aggregation associations: aggregation and 
composition (see Figure 5-8).
Aggregation is used to portray logical a-part-of relationships and is depicted on a UML 
class diagram by a hollow or white diamond. For example in Figure 5-13, three logical 
FIGURE 5-12  Sample Generalizations
Cardinal Trout
Bird Fish
Animal
Truck Car
Land
Plane Helicopter
Air
Ship Submarine
Sea
Physician Patient
General Practitioner Specialist
Person
Vehicle
Class Diagrams  183
aggregations are shown. Logical implies that it is possible for a part to be associated with 
multiple wholes or that is relatively simple for the part to be removed from the whole. For 
example, an instance of the Employee class IsPartOf an instance of at least one instance of the 
Department class, an instance of the Wheel class IsPartOf an instance of the Vehicle class, 
and an instance of the Desk class IsPartOf an instance of the Offi ce class. Obviously, in many 
cases an employee can be associated with more than one department, and it is relatively easy 
to remove a wheel from a vehicle or move a desk from an offi ce.
Composition is used to portray a physical part of relationships and is shown by a black 
diamond. Physical implies that the part can be associated with only a single whole. For example in Figure 5-14, three physical compositions are illustrated: an instance of a door can be a 
part of only a single instance of a car, an instance of a room can be a part of an instance only of 
a single building, and an instance of a button can be a part of only a single mouse. However, in 
many cases, the distinction that you can achieve by including aggregation (white diamonds) 
and composition (black diamonds) in a class diagram might not be worth the price of adding additional graphical notation for the client to learn. Th erefore, many UML experts view 
the inclusion of aggregation and composition notation to the UML class diagram as simply 
“syntactic sugar” and not necessary because the same information can always be portrayed by 
simply using the association syntax.
FIGURE 5-13
Sample Aggregation 
Associations
Department
Vehicle
Desk Office
Wheel
Employee 1..* 1..*
1..* 1
IsPartOf
IsPartOf
0..* IsPartOf 1
FIGURE 5-14
Sample Composition 
Associations
Car
Building
Button Mouse
Room
Door
1..* 1
1..* 1
IsPartOf
IsPartOf
1..* IsPartOf 1
184 Chapter 5 Structural Modeling
15 See footnote 1.
16 For those familiar with structured analysis and design, packages serve a purpose similar to the leveling and balancing processes used in data fl ow diagramming. Packages and package diagrams are described in more detail in 
Chapter 7.
Simplifying Class Diagrams
When a class diagram is fully populated with all the classes and relationships for a realworld system, the class diagram can become very diffi cult to interpret (i.e., can be very 
complex). When this occurs, it is sometimes necessary to simplify the diagram. One way 
to simplify the class diagram is to show only concrete classes.15 However, depending on the 
number of associations that are connected to abstract classes—and thus inherited down to 
the concrete classes—this particular suggestion could make the diagram more diffi cult to 
comprehend.
A second way to simplify the class diagram is through the use of a view mechanism. 
Views were developed originally with relational database management systems to show only 
a subset of the information contained in the database. In this case, the view would be a useful 
subset of the class diagram, such as a use-case view that shows only the classes and relationships relevant to a particular use case. A second view could be to show only a particular type 
of relationship: aggregation, association, or generalization. A third type of view is to restrict 
the information shown with each class, for example, show only the name of the class, the 
name and attributes, or the name and operations. Th ese view mechanisms can be combined 
to further simplify the diagram.
A third approach to simplifying a class diagram is through the use of packages (i.e., 
logical groups of classes). To make the diagrams easier to read and keep the models at a 
reasonable level of complexity, the classes can be grouped together into packages. Packages 
are general constructs that can be applied to any of the elements in UML models. In 
Chapter 4, we introduced the package idea to simplify use-case diagrams. In the case of 
class diagrams, it is simple to sort the classes into groups based on the relationships that 
they share.16
Object Diagrams
Although class diagrams are necessary to document the structure of the classes, a second 
type of static structure diagram, called an object diagram, can be useful in revealing additional information. An object diagram is essentially an instantiation of all or part of a class 
diagram. Instantiation means to create an instance of the class with a set of appropriate 
attribute values.
Object diagrams can be very useful when trying to uncover details of a class. Generally 
speaking, it is easier to think in terms of concrete objects (instances) rather than abstractions of objects (classes). For example in Figure 5-15, a portion of the class diagram in 
Figure 5-7 has been copied and instantiated. Th e top part of the fi gure simply is a copy 
of a small view of the overall class diagram. Th e lower portion is the object diagram that 
instantiates that subset of classes. By reviewing the actual instances involved, John Doe, 
Appt1, Symptom1, and Dr. Smith, we may discover additional relevant attributes, relationships, and/or operations or possibly misplaced attributes, relationships, and/or operations. 
For example, an appointment has a reason attribute. Upon closer examination, the reason attribute might have been better modeled as an association with the Symptom class. 
Currently, the Symptom class is associated with the Patient class. Aft er reviewing the object 
diagram, this seems to be in error. Th erefore, we should modify the class diagram to refl ect 
this new understanding of the problem.
Creating Structural Models Using CRC Cards And Class Diagrams  185
FIGURE 5-15  Sample Object Diagram
Patient
-amount
-insurance carrier
+make appointment()
+calculate last visit()
+change status()
+provide medical history()
0..*
0..*
0..* 0..*
1..*
1..*
1..1
1..1
Appointment
-time
-date
-reason
+cancel without notice()
+primary
insurance
carrier
Doctor
Symptom
-name
suffers
schedules
assignedTo
Participant
-lastname
-firstname
-address
-phone
-birthdate
-/age
Symptom1: Symptom
name = Muscle Pain
John Doe: Patient
lastname = Doe
firstname = John
address = 1000 Main St
phone = 555-555-5555
birthdate = 01/01/72
/ age = 40
amount = 0.00
insurance carrier = JD Health Ins
time = 3:00
date = 7/7/2012
reason = Pain in Neck
Appt1: Appointment
lastname = Smith
firstname = Jane
address = Doctor’s Clinic
phone = 999-999-9999
birthdate : 12/12/64
/ age = 48
Dr. Smith: Doctor
CREATING STRUCTURAL MODELS USING CRC CARDS 
AND CLASS DIAGRAMS
Creating a structural model is an incremental and iterative process whereby the analyst 
makes a rough cut of the model and then refi nes it over time. Structural models can become 
quite complex—in fact, there are systems that have hundreds of classes. It is important to 
remember that CRC cards and class diagrams can be used to describe both the as-is and 
to-be structural models of the evolving system, but they are most oft en used for the to-be 
model. Th ere are many diff erent ways to identify a set of candidate objects and to create 
CRC cards and class diagrams. Today most object identifi cation begins with the use cases 
186 Chapter 5 Structural Modeling
identifi ed for the problem (see Chapter 4). In this section, we describe a use-case–driven 
process that can be used to create the structural model of a problem domain.
We could begin creating the structural model with a class diagram instead of CRC cards. 
However, owing to the low-tech nature and the ease of role-playing use-case scenarios 
with CRC cards, we prefer to create the CRC cards fi rst and then transfer the information from the CRC cards into a class diagram later. As a result, the fi rst step of our recommended process is to create CRC cards. Performing textual analysis on the use-case 
descriptions does this. If you recall, the normal fl ow of events, subfl ows, and alternative/
exceptional fl ows of the use-case description were written in a special form called Subject–
Verb–Direct-Object–Preposition–Indirect object (SVDPI). By writing the use-case events 
in this form, it is easier to use the guidelines for textual analysis in Figure 5-1 to identify 
the objects. Reviewing the primary actors, stakeholders and interests, and brief descriptions 
of each use case allows additional candidate objects to be identifi ed. It is useful to go back 
and review the original requirements to look for information that was not included in the 
text of the use cases. Record all the uncovered information for each candidate object on a 
CRC card.
Th e second step is to review the CRC cards to determine if additional candidate objects, 
attributes, operations, and relationships are missing. In conjunction with this review, using 
the brainstorming and common object list approaches described earlier can aid the team in 
identifying missing classes, attributes, operations, and relationships. For example, the team 
could start a brainstorming session with a set of questions such as:
■ What are the tangible things associated with the problem?
■ What are the roles played by the people in the problem domain?
■ What incidents and interactions take place in the problem domain?
As you can readily see, by beginning with the use-case descriptions, many of these questions 
already have partial answers. For example, the primary actors and stakeholders are the roles that 
are played by the people in the problem domain. However, it is possible to uncover additional 
roles not thought of previously. Th is obviously would cause the use-case descriptions, and possibly the use-case diagram, to be modifi ed and possibly expanded. As in the previous step, be sure 
to record all the uncovered information onto the CRC cards. Th is includes any modifi cations 
uncovered for any previously identifi ed candidate objects and any information regarding any 
new candidate objects identifi ed.
Th e third step is to role-play each use-case scenario using the CRC cards. Each CRC card 
should be assigned to an individual who will perform the operations for the class on the CRC 
card. As the performers act out their roles, the system tends to break down. When this occurs, 
additional objects, attributes, operations, or relationships will be identifi ed. Again, as in the 
previous steps, any time any new information is discovered, new CRC cards are created or 
modifi cations to existing CRC cards are made.
Th e fourth step is to create the class diagram based on the CRC cards. Information contained on the CRC cards is transferred to the class diagrams. Th e responsibilities are transferred as operations; the attributes are drawn as attributes; and the relationships are drawn 
as generalization, aggregation, or association relationships. However, the class diagram 
also requires that the visibility of the attributes and operations be known. As a general 
rule, attributes are private and operations are public. Th erefore, unless the analyst has a
